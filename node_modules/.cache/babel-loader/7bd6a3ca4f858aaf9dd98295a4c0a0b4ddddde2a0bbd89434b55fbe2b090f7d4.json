{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AKAM\\\\Desktop\\\\Tutorial\\\\React\\\\Project-DBU\\\\Tender-page\\\\tender\\\\src\\\\components\\\\LogIn.js\",\n  _s = $RefreshSig$();\nimport { useRef, useState, useEffect } from \"react\";\nimport { faCheck, faTimes, faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst USER_REGEX = /^[a-zA-Z] [a-zA-Z0-9-_]{3,23}$/;\nconst PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%]).{8,24}$/;\nconst LogIn = () => {\n  _s();\n  const userRef = useRef();\n  const errRef = useRef();\n  const [user, setUser] = useState(' ');\n  const [validName, setValidName] = useState(false);\n  const [userFocus, setUserFocus] = useState(false);\n  const [pwd, setPwd] = useState(' ');\n  const [validPwd, setValidPwd] = useState(false);\n  const [pwdFocus, setPwdFocus] = useState(false);\n  const [matchPwd, setMatchPwd] = useState(' ');\n  const [validMatch, setValidMatch] = useState(false);\n  const [matchFocus, setMatchFocus] = useState(false);\n  const [errMsg, setErrMsg] = useState(' ');\n  const [success, setSuccess] = useState(false);\n  useEffect(() => {\n    userRef.current.focus();\n  }, []);\n  useEffect(() => {\n    const result = USER_REGEX.test(user);\n    console.log(result);\n    console.log(user);\n    setValidName(result);\n  }, [user]);\n  useEffect(() => {\n    const result = PWD_REGEX.test(user);\n    console.log(result);\n    console.log(pwd);\n    setValidPwd(result);\n    const match = pwd === matchPwd;\n    setValidMatch(match);\n  }, [pwd, matchPwd]);\n  useEffect(() => {\n    setErrMsg(' ');\n  }, [user, pwd, matchPwd]);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      ref: errRef,\n      className: errMsg ? \"errmsg\" : \"offsccreen\",\n      \"aria-live\": \"assertive\",\n      children: errMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"username\",\n        children: [\"Username:\", /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faCheck,\n          className: validName ? \"valid\" : \"hide\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faTimes,\n          className: validName || !user ? \"hide\" : \"invalid\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"username\",\n        ref: \"userRef\",\n        autocomplete: \"off\",\n        onChange: e => setUser(e.target.value),\n        required: true,\n        \"aria-invalid\": valid ? \"false\" : \"true\",\n        \"aria-describeby\": \"uidnote\",\n        onFocus: () => setUserFocus(true),\n        onBlur: () => setUserFocus(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"uidnote\",\n        className: userFocus && user && !validName ? \"instructions\" : \"offscreen\",\n        children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faInfoCircle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 29\n        }, this), \"4 to 24 characters.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 48\n        }, this), \"Must begin with a letter.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 54\n        }, this), \"Letters, numbers, underscores, hyphens allowed.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 12\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(LogIn, \"Kn3Av7cwET4N0qV+G0qcu9X3nvA=\");\n_c = LogIn;\nexport default LogIn;\n\n// the correct working one \n// import { useRef, useState, useEffect } from \"react\";\n// import { faCheck, faTimes, faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import axios from './api/axios';\n\n// const USER_REGEX = /^[A-z][A-z0-9-_]{3,23}$/;\n// const PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%]).{8,24}$/;\n// const REGISTER_URL = '/register';\n\n// const Register = () => {\n//     const userRef = useRef();\n//     const errRef = useRef();\n\n//     const [user, setUser] = useState('');\n//     const [validName, setValidName] = useState(false);\n//     const [userFocus, setUserFocus] = useState(false);\n\n//     const [pwd, setPwd] = useState('');\n//     const [validPwd, setValidPwd] = useState(false);\n//     const [pwdFocus, setPwdFocus] = useState(false);\n\n//     const [matchPwd, setMatchPwd] = useState('');\n//     const [validMatch, setValidMatch] = useState(false);\n//     const [matchFocus, setMatchFocus] = useState(false);\n\n//     const [errMsg, setErrMsg] = useState('');\n//     const [success, setSuccess] = useState(false);\n\n//     useEffect(() => {\n//         userRef.current.focus();\n//     }, [])\n\n//     useEffect(() => {\n//         setValidName(USER_REGEX.test(user));\n//     }, [user])\n\n//     useEffect(() => {\n//         setValidPwd(PWD_REGEX.test(pwd));\n//         setValidMatch(pwd === matchPwd);\n//     }, [pwd, matchPwd])\n\n//     useEffect(() => {\n//         setErrMsg('');\n//     }, [user, pwd, matchPwd])\n\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n//         // if button enabled with JS hack\n//         const v1 = USER_REGEX.test(user);\n//         const v2 = PWD_REGEX.test(pwd);\n//         if (!v1 || !v2) {\n//             setErrMsg(\"Invalid Entry\");\n//             return;\n//         }\n//         try {\n//             const response = await axios.post(REGISTER_URL,\n//                 JSON.stringify({ user, pwd }),\n//                 {\n//                     headers: { 'Content-Type': 'application/json' },\n//                     withCredentials: true\n//                 }\n//             );\n//             console.log(response?.data);\n//             console.log(response?.accessToken);\n//             console.log(JSON.stringify(response))\n//             setSuccess(true);\n//             //clear state and controlled inputs\n//             //need value attrib on inputs for this\n//             setUser('');\n//             setPwd('');\n//             setMatchPwd('');\n//         } catch (err) {\n//             if (!err?.response) {\n//                 setErrMsg('No Server Response');\n//             } else if (err.response?.status === 409) {\n//                 setErrMsg('Username Taken');\n//             } else {\n//                 setErrMsg('Registration Failed')\n//             }\n//             errRef.current.focus();\n//         }\n//     }\n\n//     return (\n//         <>\n//             {success ? (\n//                 <section>\n//                     <h1>Success!</h1>\n//                     <p>\n//                         <a href=\"#\">Sign In</a>\n//                     </p>\n//                 </section>\n//             ) : (\n//                 <section>\n//                     <p ref={errRef} className={errMsg ? \"errmsg\" : \"offscreen\"} aria-live=\"assertive\">{errMsg}</p>\n//                     <h1>Register</h1>\n//                     <form onSubmit={handleSubmit}>\n//                         <label htmlFor=\"username\">\n//                             Username:\n//                             <FontAwesomeIcon icon={faCheck} className={validName ? \"valid\" : \"hide\"} />\n//                             <FontAwesomeIcon icon={faTimes} className={validName || !user ? \"hide\" : \"invalid\"} />\n//                         </label>\n//                         <input\n//                             type=\"text\"\n//                             id=\"username\"\n//                             ref={userRef}\n//                             autoComplete=\"off\"\n//                             onChange={(e) => setUser(e.target.value)}\n//                             value={user}\n//                             required\n//                             aria-invalid={validName ? \"false\" : \"true\"}\n//                             aria-describedby=\"uidnote\"\n//                             onFocus={() => setUserFocus(true)}\n//                             onBlur={() => setUserFocus(false)}\n//                         />\n//                         <p id=\"uidnote\" className={userFocus && user && !validName ? \"instructions\" : \"offscreen\"}>\n//                             <FontAwesomeIcon icon={faInfoCircle} />\n//                             4 to 24 characters.<br />\n//                             Must begin with a letter.<br />\n//                             Letters, numbers, underscores, hyphens allowed.\n//                         </p>\n\n//                         <label htmlFor=\"password\">\n//                             Password:\n//                             <FontAwesomeIcon icon={faCheck} className={validPwd ? \"valid\" : \"hide\"} />\n//                             <FontAwesomeIcon icon={faTimes} className={validPwd || !pwd ? \"hide\" : \"invalid\"} />\n//                         </label>\n//                         <input\n//                             type=\"password\"\n//                             id=\"password\"\n//                             onChange={(e) => setPwd(e.target.value)}\n//                             value={pwd}\n//                             required\n//                             aria-invalid={validPwd ? \"false\" : \"true\"}\n//                             aria-describedby=\"pwdnote\"\n//                             onFocus={() => setPwdFocus(true)}\n//                             onBlur={() => setPwdFocus(false)}\n//                         />\n//                         <p id=\"pwdnote\" className={pwdFocus && !validPwd ? \"instructions\" : \"offscreen\"}>\n//                             <FontAwesomeIcon icon={faInfoCircle} />\n//                             8 to 24 characters.<br />\n//                             Must include uppercase and lowercase letters, a number and a special character.<br />\n//                             Allowed special characters: <span aria-label=\"exclamation mark\">!</span> <span aria-label=\"at symbol\">@</span> <span aria-label=\"hashtag\">#</span> <span aria-label=\"dollar sign\">$</span> <span aria-label=\"percent\">%</span>\n//                         </p>\n\n//                         <label htmlFor=\"confirm_pwd\">\n//                             Confirm Password:\n//                             <FontAwesomeIcon icon={faCheck} className={validMatch && matchPwd ? \"valid\" : \"hide\"} />\n//                             <FontAwesomeIcon icon={faTimes} className={validMatch || !matchPwd ? \"hide\" : \"invalid\"} />\n//                         </label>\n//                         <input\n//                             type=\"password\"\n//                             id=\"confirm_pwd\"\n//                             onChange={(e) => setMatchPwd(e.target.value)}\n//                             value={matchPwd}\n//                             required\n//                             aria-invalid={validMatch ? \"false\" : \"true\"}\n//                             aria-describedby=\"confirmnote\"\n//                             onFocus={() => setMatchFocus(true)}\n//                             onBlur={() => setMatchFocus(false)}\n//                         />\n//                         <p id=\"confirmnote\" className={matchFocus && !validMatch ? \"instructions\" : \"offscreen\"}>\n//                             <FontAwesomeIcon icon={faInfoCircle} />\n//                             Must match the first password input field.\n//                         </p>\n\n//                         <button disabled={!validName || !validPwd || !validMatch ? true : false}>Sign Up</button>\n//                     </form>\n//                     <p>\n//                         Already registered?<br />\n//                         <span className=\"line\">\n//                             {/*put router link here*/}\n//                             <a href=\"#\">Sign In</a>\n//                         </span>\n//                     </p>\n//                 </section>\n//             )}\n//         </>\n//     )\n// }\n\n// export default Register\nvar _c;\n$RefreshReg$(_c, \"LogIn\");","map":{"version":3,"names":["useRef","useState","useEffect","faCheck","faTimes","faInfoCircle","FontAwesomeIcon","jsxDEV","_jsxDEV","USER_REGEX","PWD_REGEX","LogIn","_s","userRef","errRef","user","setUser","validName","setValidName","userFocus","setUserFocus","pwd","setPwd","validPwd","setValidPwd","pwdFocus","setPwdFocus","matchPwd","setMatchPwd","validMatch","setValidMatch","matchFocus","setMatchFocus","errMsg","setErrMsg","success","setSuccess","current","focus","result","test","console","log","match","children","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","icon","type","id","autocomplete","onChange","e","target","value","required","valid","onFocus","onBlur","_c","$RefreshReg$"],"sources":["C:/Users/AKAM/Desktop/Tutorial/React/Project-DBU/Tender-page/tender/src/components/LogIn.js"],"sourcesContent":["import { useRef , useState , useEffect} from \"react\";\r\nimport { faCheck , faTimes , faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nconst   USER_REGEX = /^[a-zA-Z] [a-zA-Z0-9-_]{3,23}$/;\r\nconst PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%]).{8,24}$/;\r\n\r\n\r\n\r\nconst LogIn = () => {\r\n\r\n   const userRef = useRef();\r\n   const errRef = useRef();\r\n\r\n   const[user ,setUser] = useState(' ');\r\n   const[validName ,setValidName] = useState(false);\r\n   const[userFocus ,setUserFocus] = useState(false);\r\n\r\n   const[pwd ,setPwd] = useState(' ');\r\n   const[validPwd ,setValidPwd] = useState(false);\r\n   const[pwdFocus ,setPwdFocus] = useState(false);\r\n\r\n   const[matchPwd ,setMatchPwd] = useState(' ');\r\n   const[validMatch ,setValidMatch] = useState(false);\r\n   const[matchFocus ,setMatchFocus] = useState(false);\r\n\r\n   const[errMsg ,setErrMsg] = useState(' ');\r\n   const[success ,setSuccess] = useState(false);\r\n  \r\n   useEffect(()=> {\r\n         userRef.current.focus();\r\n   }, [])\r\n\r\n   useEffect(()=> {\r\n   const result = USER_REGEX.test(user);\r\n   console.log(result);\r\n   console.log(user);\r\n   setValidName(result);\r\n}, [user])\r\n\r\n\r\nuseEffect(()=> {\r\n    const result = PWD_REGEX.test(user);\r\n    console.log(result);\r\n    console.log(pwd);\r\n    setValidPwd(result);\r\n    const match = pwd === matchPwd;\r\n    setValidMatch(match);\r\n }, [pwd, matchPwd])\r\n\r\n useEffect(()=> {\r\n    setErrMsg(' ');\r\n\r\n}, [user, pwd, matchPwd])\r\n\r\n\r\n\r\n  return (\r\n    <section>\r\n       <p ref={errRef} className={errMsg ? \"errmsg\" : \"offsccreen\"} \r\n           aria-live=\"assertive\" >{errMsg}</p> \r\n           <h1> register</h1>\r\n           <form>\r\n                <label htmlFor=\"username\">\r\n                    Username:\r\n                    <FontAwesomeIcon icon={faCheck} className={validName ? \"valid\" : \"hide\"} />\r\n                    <FontAwesomeIcon icon={faTimes} className={validName || !user ? \"hide\" : \"invalid\"} />\r\n                </label>\r\n\r\n                <input \r\n                       type=\"text\"\r\n                       id=\"username\"\r\n                       ref=\"userRef\"\r\n                       autocomplete=\"off\"\r\n                       onChange={(e) => setUser(e.target.value)}\r\n                       required \r\n                       aria-invalid={valid ? \"false\" : \"true\"}\r\n                       aria-describeby=\"uidnote\"\r\n                       onFocus={() => setUserFocus(true)}\r\n                       onBlur={() => setUserFocus(false)}\r\n                       ></input>     \r\n           <p id=\"uidnote\" className={userFocus && user && !validName ? \"instructions\" : \"offscreen\"}>\r\n                            <FontAwesomeIcon icon={faInfoCircle} />\r\n                            4 to 24 characters.<br />\r\n                            Must begin with a letter.<br />\r\n                            Letters, numbers, underscores, hyphens allowed.\r\n                        </p>\r\n\r\n           </form>\r\n\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default LogIn\r\n\r\n     // the correct working one \r\n// import { useRef, useState, useEffect } from \"react\";\r\n// import { faCheck, faTimes, faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\r\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n// import axios from './api/axios';\r\n\r\n// const USER_REGEX = /^[A-z][A-z0-9-_]{3,23}$/;\r\n// const PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%]).{8,24}$/;\r\n// const REGISTER_URL = '/register';\r\n\r\n// const Register = () => {\r\n//     const userRef = useRef();\r\n//     const errRef = useRef();\r\n\r\n//     const [user, setUser] = useState('');\r\n//     const [validName, setValidName] = useState(false);\r\n//     const [userFocus, setUserFocus] = useState(false);\r\n\r\n//     const [pwd, setPwd] = useState('');\r\n//     const [validPwd, setValidPwd] = useState(false);\r\n//     const [pwdFocus, setPwdFocus] = useState(false);\r\n\r\n//     const [matchPwd, setMatchPwd] = useState('');\r\n//     const [validMatch, setValidMatch] = useState(false);\r\n//     const [matchFocus, setMatchFocus] = useState(false);\r\n\r\n//     const [errMsg, setErrMsg] = useState('');\r\n//     const [success, setSuccess] = useState(false);\r\n\r\n//     useEffect(() => {\r\n//         userRef.current.focus();\r\n//     }, [])\r\n\r\n//     useEffect(() => {\r\n//         setValidName(USER_REGEX.test(user));\r\n//     }, [user])\r\n\r\n//     useEffect(() => {\r\n//         setValidPwd(PWD_REGEX.test(pwd));\r\n//         setValidMatch(pwd === matchPwd);\r\n//     }, [pwd, matchPwd])\r\n\r\n//     useEffect(() => {\r\n//         setErrMsg('');\r\n//     }, [user, pwd, matchPwd])\r\n\r\n//     const handleSubmit = async (e) => {\r\n//         e.preventDefault();\r\n//         // if button enabled with JS hack\r\n//         const v1 = USER_REGEX.test(user);\r\n//         const v2 = PWD_REGEX.test(pwd);\r\n//         if (!v1 || !v2) {\r\n//             setErrMsg(\"Invalid Entry\");\r\n//             return;\r\n//         }\r\n//         try {\r\n//             const response = await axios.post(REGISTER_URL,\r\n//                 JSON.stringify({ user, pwd }),\r\n//                 {\r\n//                     headers: { 'Content-Type': 'application/json' },\r\n//                     withCredentials: true\r\n//                 }\r\n//             );\r\n//             console.log(response?.data);\r\n//             console.log(response?.accessToken);\r\n//             console.log(JSON.stringify(response))\r\n//             setSuccess(true);\r\n//             //clear state and controlled inputs\r\n//             //need value attrib on inputs for this\r\n//             setUser('');\r\n//             setPwd('');\r\n//             setMatchPwd('');\r\n//         } catch (err) {\r\n//             if (!err?.response) {\r\n//                 setErrMsg('No Server Response');\r\n//             } else if (err.response?.status === 409) {\r\n//                 setErrMsg('Username Taken');\r\n//             } else {\r\n//                 setErrMsg('Registration Failed')\r\n//             }\r\n//             errRef.current.focus();\r\n//         }\r\n//     }\r\n\r\n//     return (\r\n//         <>\r\n//             {success ? (\r\n//                 <section>\r\n//                     <h1>Success!</h1>\r\n//                     <p>\r\n//                         <a href=\"#\">Sign In</a>\r\n//                     </p>\r\n//                 </section>\r\n//             ) : (\r\n//                 <section>\r\n//                     <p ref={errRef} className={errMsg ? \"errmsg\" : \"offscreen\"} aria-live=\"assertive\">{errMsg}</p>\r\n//                     <h1>Register</h1>\r\n//                     <form onSubmit={handleSubmit}>\r\n//                         <label htmlFor=\"username\">\r\n//                             Username:\r\n//                             <FontAwesomeIcon icon={faCheck} className={validName ? \"valid\" : \"hide\"} />\r\n//                             <FontAwesomeIcon icon={faTimes} className={validName || !user ? \"hide\" : \"invalid\"} />\r\n//                         </label>\r\n//                         <input\r\n//                             type=\"text\"\r\n//                             id=\"username\"\r\n//                             ref={userRef}\r\n//                             autoComplete=\"off\"\r\n//                             onChange={(e) => setUser(e.target.value)}\r\n//                             value={user}\r\n//                             required\r\n//                             aria-invalid={validName ? \"false\" : \"true\"}\r\n//                             aria-describedby=\"uidnote\"\r\n//                             onFocus={() => setUserFocus(true)}\r\n//                             onBlur={() => setUserFocus(false)}\r\n//                         />\r\n//                         <p id=\"uidnote\" className={userFocus && user && !validName ? \"instructions\" : \"offscreen\"}>\r\n//                             <FontAwesomeIcon icon={faInfoCircle} />\r\n//                             4 to 24 characters.<br />\r\n//                             Must begin with a letter.<br />\r\n//                             Letters, numbers, underscores, hyphens allowed.\r\n//                         </p>\r\n\r\n\r\n//                         <label htmlFor=\"password\">\r\n//                             Password:\r\n//                             <FontAwesomeIcon icon={faCheck} className={validPwd ? \"valid\" : \"hide\"} />\r\n//                             <FontAwesomeIcon icon={faTimes} className={validPwd || !pwd ? \"hide\" : \"invalid\"} />\r\n//                         </label>\r\n//                         <input\r\n//                             type=\"password\"\r\n//                             id=\"password\"\r\n//                             onChange={(e) => setPwd(e.target.value)}\r\n//                             value={pwd}\r\n//                             required\r\n//                             aria-invalid={validPwd ? \"false\" : \"true\"}\r\n//                             aria-describedby=\"pwdnote\"\r\n//                             onFocus={() => setPwdFocus(true)}\r\n//                             onBlur={() => setPwdFocus(false)}\r\n//                         />\r\n//                         <p id=\"pwdnote\" className={pwdFocus && !validPwd ? \"instructions\" : \"offscreen\"}>\r\n//                             <FontAwesomeIcon icon={faInfoCircle} />\r\n//                             8 to 24 characters.<br />\r\n//                             Must include uppercase and lowercase letters, a number and a special character.<br />\r\n//                             Allowed special characters: <span aria-label=\"exclamation mark\">!</span> <span aria-label=\"at symbol\">@</span> <span aria-label=\"hashtag\">#</span> <span aria-label=\"dollar sign\">$</span> <span aria-label=\"percent\">%</span>\r\n//                         </p>\r\n\r\n\r\n//                         <label htmlFor=\"confirm_pwd\">\r\n//                             Confirm Password:\r\n//                             <FontAwesomeIcon icon={faCheck} className={validMatch && matchPwd ? \"valid\" : \"hide\"} />\r\n//                             <FontAwesomeIcon icon={faTimes} className={validMatch || !matchPwd ? \"hide\" : \"invalid\"} />\r\n//                         </label>\r\n//                         <input\r\n//                             type=\"password\"\r\n//                             id=\"confirm_pwd\"\r\n//                             onChange={(e) => setMatchPwd(e.target.value)}\r\n//                             value={matchPwd}\r\n//                             required\r\n//                             aria-invalid={validMatch ? \"false\" : \"true\"}\r\n//                             aria-describedby=\"confirmnote\"\r\n//                             onFocus={() => setMatchFocus(true)}\r\n//                             onBlur={() => setMatchFocus(false)}\r\n//                         />\r\n//                         <p id=\"confirmnote\" className={matchFocus && !validMatch ? \"instructions\" : \"offscreen\"}>\r\n//                             <FontAwesomeIcon icon={faInfoCircle} />\r\n//                             Must match the first password input field.\r\n//                         </p>\r\n\r\n//                         <button disabled={!validName || !validPwd || !validMatch ? true : false}>Sign Up</button>\r\n//                     </form>\r\n//                     <p>\r\n//                         Already registered?<br />\r\n//                         <span className=\"line\">\r\n//                             {/*put router link here*/}\r\n//                             <a href=\"#\">Sign In</a>\r\n//                         </span>\r\n//                     </p>\r\n//                 </section>\r\n//             )}\r\n//         </>\r\n//     )\r\n// }\r\n\r\n// export default Register\r\n"],"mappings":"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AAqFX,eAAeA,KAAK;;AAEf;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}